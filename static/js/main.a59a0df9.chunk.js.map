{"version":3,"sources":["components/AnimeQuote.js","components/AnimeCard.js","App.js","reportWebVitals.js","index.js"],"names":["AnimeQuote","_ref","quote","index","React","createElement","AnimeCard","props","apiOptions","characters","animes","label","setQuote","useState","useEffect","async","request","Math","floor","random","response","fetch","data","json","console","log","error","fetchData","length","character","anime","map","App","then","catch","action","setAction","updateAction","inputAction","inputRef","useRef","inText","setText","responseQuote","setResponseQuote","className","onClick","ref","type","enterText","inputValue","current","value","replace","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.a59a0df9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './AnimeQuote.css';\r\n\r\nconst AnimeQuote = ({quote, index}) => {\r\n    return (\r\n        <div>\r\n            <h4>{index + 1}. \"{quote}\"</h4>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnimeQuote;","import React, { useState, useEffect } from 'react';\r\nimport './AnimeCard.css';\r\nimport AnimeQuote from './AnimeQuote';\r\n\r\nfunction AnimeCard(props) {\r\n    const option = [\r\n        \"Ten Random Quotes\",\r\n        \"Ten Random Quotes by\",\r\n        \"Ten Random Quotes from\"\r\n    ];\r\n\r\n    const apiOptions = [\r\n        \"https://animechan.xyz/api/quotes\",\r\n        \"https://animechan.xyz/api/quotes/character?name=\",\r\n        \"https://animechan.xyz/api/quotes/anime?title=\"\r\n    ];\r\n\r\n    const characters = [\r\n        \"Saitama\",\r\n        \"Goku\",\r\n        \"Vegeta\",\r\n        \"Yuji_Itadori\",\r\n        \"Naruto_Uzumaki\",\r\n        \"Sasuke_Uchiha\",\r\n        \"Eren_Jaeger\",\r\n        \"Levi_Ackerman\",\r\n        \"Light_Yagami\",\r\n        \"Ryuk\"\r\n    ];\r\n\r\n    const animes = [\r\n        \"one_piece\",\r\n        \"naruto\",\r\n        \"dragon_ball\",\r\n        \"one_punch_man\",\r\n        \"bleach\",\r\n        \"hunter_x_hunter\",\r\n        \"my_hero_academia\",\r\n        \"attack_on_titan\",\r\n        \"sword_art_online\",\r\n        \"black_clover\",\r\n        \"Jujutsu_Kaisen\",\r\n    ];\r\n\r\n    let label = \"\";\r\n\r\n    const [quote, setQuote] = useState([]);\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            try {\r\n                label = (props.request === 2 ? characters[Math.floor(Math.random() * 10)] : props.request === 3 ? animes[Math.floor(Math.random() * 10)] : \"\");\r\n                const response = await fetch(apiOptions[props.request - 1] + label);\r\n                const data = await response.json();\r\n                console.log(\"API Response:\", data); // Log the API response\r\n                console.log(\"Type\", typeof data); // Log the type of data (should be an array of objects\r\n                setQuote(data);\r\n            } catch (error) {\r\n                console.error('Error fetching data: ', error);\r\n            }\r\n        }\r\n\r\n        fetchData();\r\n    }, [props.request]);\r\n\r\n    return (\r\n        <div>\r\n            <h2>{option[props.request - 1]} {quote.length > 0 && (props.request === 2 ? quote[0].character : props.request === 3 ? quote[0].anime : \"\")}</h2>\r\n            {quote.map((quote, index) => (\r\n                <AnimeQuote index = {index} quote = {quote.quote} />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AnimeCard;\r\n","  import React, { useState, useEffect, useRef } from 'react';\n  import './App.css';\n  import AnimeCard from './components/AnimeCard.js';\n\n    function App() {\n\n      const [quote, setQuote] = useState('');\n\n      useEffect(() => {\n          fetch('https://animechan.xyz/api/random')\n              .then(response => response.json())\n              .then(data => {\n                  console.log(data);\n                  setQuote(data);\n          })\n          .catch(error => console.log('error', error));\n      }, []);\n\n      const [action, setAction] = useState(0);\n\n      const updateAction = (inputAction) => {\n        setAction(inputAction);\n      };\n      \n      const inputRef = useRef(null);\n      const [inText, setText] = useState('');\n      const [responseQuote, setResponseQuote] = useState('');\n      const enterText = () => {\n        let inputValue = inputRef.current.value;\n        inputValue = inputValue.replace(/ /g, '_');\n\n        setText(inputValue);\n        fetch('https://animechan.xyz/api/random/character?name=' + inputValue)\n          .then(response => response.json())\n          .then(data => {\n            console.log(data);\n            setResponseQuote(data);\n          })\n          .catch(error => console.log('error', error));\n\n      };\n\n      return (\n      <div className=\"container\">\n        <div className=\"banner\">\n          <h1>Anime Fun</h1>\n          <h4>Characters, Quotes and More!</h4>\n        </div>\n\n        <div>\n          <h2>Random Quote:</h2>\n          <p2>{quote.quote}</p2>\n        </div>\n        \n        <div className=\"row-2\">\n          <button onClick={() => updateAction(1)}>Quote</button>\n          <button onClick={() => updateAction(2)}>Character</button>\n          <button onClick={() => updateAction(3)}>Anime</button>\n        </div>\n\n        <AnimeCard request={action}/>\n        \n        <div className='row'>\n          <h2>Who's your favorite Character?</h2>\n        </div>\n\n        <div className=\"row\">\n          <div className='col-12'>\n            <input\n            ref={inputRef}\n            type='text'\n            />\n          </div>\n        </div>\n        <div>\n          <button onClick={enterText}>Submit</button>\n        </div>\n\n        <div>\n          <p>{responseQuote.quote}</p>\n        </div>\n\n      </div>\n      );\n    }\n\n    export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}